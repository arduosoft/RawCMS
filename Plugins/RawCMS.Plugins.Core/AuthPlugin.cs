//******************************************************************************
// <copyright file="license.md" company="RawCMS project  (https://github.com/arduosoft/RawCMS)">
// Copyright (c) 2019 RawCMS project  (https://github.com/arduosoft/RawCMS)
// RawCMS project is released under GPL3 terms, see LICENSE file on repository root at  https://github.com/arduosoft/RawCMS .
// </copyright>
// <author>Daniele Fontani, Emanuele Bucarelli, Francesco Mina'</author>
// <autogenerated>true</autogenerated>
//******************************************************************************
using IdentityModel.AspNetCore.OAuth2Introspection;
using IdentityServer4.AccessTokenValidation;
using IdentityServer4.Services;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.IdentityModel.Logging;
using RawCMS.Library.Core;
using RawCMS.Library.Core.Interfaces;
using RawCMS.Plugins.Core.Configuration;
using RawCMS.Plugins.Core.Extensions;
using RawCMS.Plugins.Core.Handlers;
using RawCMS.Plugins.Core.Model;
using RawCMS.Plugins.Core.Stores;
using System.Security.Claims;

namespace RawCMS.Plugins.Core
{
    public class AuthPlugin : RawCMS.Library.Core.Extension.Plugin, IConfigurablePlugin<AuthConfig>
    {
        public override string Name => "Authorization";

        public override string Description => "Add authorizaton capabilities";

        private readonly AuthConfig config;
        private AppEngine appEngine;

        public AuthPlugin(AppEngine appEngine, AuthConfig config, ILogger logger) : base(appEngine, logger)
        {
            this.appEngine = appEngine;
            this.config = config;
            Logger.LogInformation("Authorization plugin loaded");
        }

        public override void ConfigureServices(IServiceCollection services)
        {
            IdentityModelEventSource.ShowPII = true;
            services.AddSingleton<IUserStore<IdentityUser>, RawUserStore>();
            services.AddSingleton<IUserPasswordStore<IdentityUser>, RawUserStore>();
            services.AddSingleton<IPasswordValidator<IdentityUser>, RawUserStore>();
            services.AddSingleton<IUserClaimStore<IdentityUser>, RawUserStore>();
            services.AddSingleton<IPasswordHasher<IdentityUser>, RawUserStore>();
            services.AddSingleton<IProfileService, RawUserStore>();
            services.AddSingleton<IUserClaimsPrincipalFactory<IdentityUser>, RawClaimsFactory>();

            services.AddSingleton<RawRoleStore>();
            services.AddSingleton<IRoleStore<IdentityRole>, RawRoleStore>();
            services.AddIdentity<IdentityUser, IdentityRole>();

            // configure identity server with in-memory stores, keys, clients and scopes
            services.AddIdentityServer()
            .AddDeveloperSigningCredential()
            .AddInMemoryPersistedGrants()
            .AddInMemoryIdentityResources(this.config.GetIdentityResources())
            .AddInMemoryApiResources(config.GetApiResources())
            .AddInMemoryClients(config.GetClients())
            .AddAspNetIdentity<IdentityUser>()
            .AddProfileServiceCustom();

            if (config.Mode == OAuthMode.External)
            {
                OAuth2IntrospectionOptions options = new OAuth2IntrospectionOptions
                {
                    //base - address of your identityserver
                    Authority = config.Authority,
                    ClientSecret = config.ClientSecret,
                    ClientId = config.ClientId,
                    BasicAuthenticationHeaderStyle = IdentityModel.Client.BasicAuthenticationHeaderStyle.Rfc2617
                };
                if (!string.IsNullOrWhiteSpace(config.IntrospectionEndpoint))
                {
                    options.IntrospectionEndpoint = config.IntrospectionEndpoint;
                }
                options.TokenTypeHint = "Bearer";
                if (!string.IsNullOrWhiteSpace(config.TokenTypeHint))
                {
                    options.TokenTypeHint = config.TokenTypeHint;
                }

                options.Validate();

                services.AddAuthentication(OAuth2IntrospectionDefaults.AuthenticationScheme)
                    .AddOAuth2Introspection(x =>
                    {
                        x = options;
                    });
            }
            else
            {
                services
                .AddAuthentication((options) =>
                {
                    options.DefaultScheme = "Bearer";
                    options.DefaultChallengeScheme = "Bearer";
                    //options.AddScheme("ApiKey", (x) => { x.HandlerType = typeof(RawLocalAccessTokenValidationHandler); });
                })
                .AddJwtBearer("Bearer" + IdentityServerAuthenticationDefaults.AuthenticationScheme, (options) =>
                 {
                     options.RequireHttpsMetadata = false;
                     options.SaveToken = true;
                     options.IncludeErrorDetails = true;
                     options.TokenValidationParameters = new Microsoft.IdentityModel.Tokens.TokenValidationParameters()
                     {
                         RoleClaimType = ClaimTypes.Role,
                         NameClaimType = ClaimTypes.NameIdentifier
                     };
                     //options.Audience = IdentityServer4.IdentityServerConstants.LocalIdentityProvider;
                     //options.Authority = IdentityServer4.IdentityServerConstants.LocalIdentityProvider;
                     options.Validate();
                 })
                .AddScheme<RawIdentityServerAuthenticationOptions, RawLocalAccessTokenValidationHandler>("Bearer", (o) =>
                {
                    o.AdminApiKey = this.config.AdminApiKey;
                    o.ApiKey = this.config.ApiKey;
                })
                 .AddScheme<RawIdentityServerAuthenticationOptions, RawLocalAccessTokenValidationHandler>("ApiKey", (o) =>
                  {
                      o.AdminApiKey = this.config.AdminApiKey;
                      o.ApiKey = this.config.ApiKey;
                  });
            }
        }

        public override void Configure(IApplicationBuilder app)
        {
            app.UseIdentityServer();
            app.UseAuthentication();
        }

        public override void ConfigureMvc(IMvcBuilder builder)
        {
        }

        public override void Setup(IConfigurationRoot configuration)
        {
        }
    }
}